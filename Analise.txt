each ordinary thief is a singular thread
master thief is a thread as well

3 OTs form an assault party
assault parties are independent  - they dont need to communicate with one another

OTs individually report a canvas to the MT (collection site????)

OTs need to communicate between themselves but must do so through a shared memory region(in this case through the corresponding assault party memory region????)





Random values:
maximum thief displacement (2-6)
room-concentration site distance (15-30) 
paintings per room (8-16)

Static values:
maximum distance between thieves (3)
number of thieves (6 OT + 1MT)
number of rooms (5)


Final Method Listing:

Control Site:
appraiseSit --atribuido
takeARest --atribuido
collectACanvas --atribuido
handACanvas --atribuido
sendAssaultParty --atribuido

Concentration Site:
amINeeded --atribuido
prepareExcursion --atribuido
prepareAssaultParty --atribuido

Collection Site:
startOperations --atribuido
sumUpResults --atribuido

Assault Party #:
crawlIn --atribuido
crawlOut --atribuido
reverseDirection --atribuido

Museum:
rollACanvas --atribuido

ReentrantLock methods:

lock,unlock, await, signal, signalAll

data structure:
-Thief: (implements MasterThief)
    - int State;
-oThief (extends Thief):
    - char Situation ('W' or 'P')
    - int MD (Maximum displacement); (2...6)
    - int presentPosition (distance to current room);
    - int carryingCanvas (1 or 0);

-AssaultParty:
    - int RoomId; (1...5)
    - int[] thiefId; //size 3, fifo
    - int currentNumOfThieves;(?)

-museumRoom: --removed
    - int roomID;
    - int paintsInRoom (1...5); //current number of paintings in room
    - int distanceToSite (15...30); //distance to gathering site

-Museum:
    - int[] museumRoom; //maybe a stack?

---------------------------------------------------------------
main - pasta a conter o main
sharedRegions - monitores
commonInfrastructure - tipos de dados (neste caso o FIFO)
entities - threads
---------------------------------------------------------------

analise de sincronia entre eventos:

AssaultParties sao geradas em grupos de 3, na disciplina fifo
portanto a partida a sua geraçao e assicrona, mas os relatos do
amINeeded sao sincronos

movimentos sao sincronos entre ladroes da mesma party mas assincronos
entre parties

handACanvas tem que ser sincronizado entre todos os ladroes: apenas 
um ladrao o pode estar a executar a qualquer momento

acessos ao repositorio tambem e sincrono entre as regioes partilhadas


mar 9:
museum is a single shared region, as opposed to initial intended approach of every room
being a single shared region. this means that the Museum class needs to be changed.

change random number generation methods for all random variables

this.lock = lock;
this.cond = lock.newCondition(); 
//maybe correct????? is this a reference to 
//the lock argument's condition, or a new condition entirely
//manter equipas estaticas - abordagem mais facil e recomendada pelo prof 

tentative movement algorithm:
MD - maximum thief displacement for one increment
S - maximum distance between 2 consecutive thieves in a single party
D - distance from room to site

oThief[] thieves;
oThief curThread = (oThief)Thread.currentThread();

pseudocodigo:

AssaultParty.lock()
if(thieves[curThiefPPos].getCurPos() <= Museum.getRoom(roomNumber).getDistance())
{
    if(thieves[curThiefPPos].getCurPos() < (thieves[curThiefPPos+1].getCurPos()+S))
    {
        incrementMovement;
        AssaultParty.unlock();
        return;
    }
    else
    {
        AssaultParty.unlock();
        return;
    }

}


Assault Parties being static might change the amINeeded interpretation

9/3 todo list:
implement movement algorithms (figure out calculations)
remove MuseumRoom.java and finish implementing the Museum region
change random number generation calculations for the needed variables
check condition variable implementation - reference vs object corrections
start implementing the configuration class
possibly start working on code documentation and interaction diagram


10/3:

using a direction variable makes no sense:
going to the museum: movement happens until position equals room distance
going to the site:


changelog
crawlIn and crawlOut methods implemented
MuseumRoom class removed and Museum classed changed
random number generation fixed (untested)



16/03--------------------------
numero do grupo:6

alteraçao de switch case para lifecycle



------------------------------------------------------

18/03
ver o prepareAssaultParty e o sendAssaultParty

----------------------------

crawlIn e crawlOut acabados




-----------------

if(exitsPaintings){
    while(availableThieves < 3){
        cond.await();
    }
    return 0;
}else{
    for(AssaultParty x: aParties){
        if(x.getStatus()){
            return 1;
        }
    }
}

cond.signalAll()
while(!isFull()){
    cond.await();
}
change state
return



-----------------------------
ConcentrationSite
amINeeded
    -esta funçao so ve se as salas ja estao todas vazias e quantos ladroes ha disponiveis
sendAssaultParty
    - mete a flag the Ready da party a true e da signal as threads da party
prepareAssaultParty
    -muda o estado
    -acorda o ordinary thief preso no amINeeded, 
    -decidir a sala destino
    -decidir a party que se vai formar (ou 1 ou 0)

ControlSite
handACanvas 
    -entrega o quadro, signal MT, resetar o thief,   
collectACanvas
    - processa o quadro e sinaliza o thief que o entregou (supostamente)
appraiseSit
    -ve o estado das salas vazias e dos ladroes disponiveis
    -decide se cria um grupo, se espera por um grupo, ou se acaba a simulaçao
takeARest
    - sleep() durante tempo aletatorio, change state, wait() for handACanvas()
sumUpResults


AssaultParty
prepareExcursion
    -ladroes entram na party que esta a ser trabalhada, dao signal quando entram no metodo, so saem se 
    a party tiver sido declarada como ready no sendAssaultParty
crawlIn
    -
crawlOut
    -
reverseDirection


Museum
rollACanvas

GeneralRepos
funçoes de print


mandar em 7z e com as disponibilidades

meter o prepareAssaultParty e o amINeeded no controlSite